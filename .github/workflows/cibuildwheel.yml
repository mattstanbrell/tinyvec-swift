name: Build Python Package
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
      - name: Build SDist
        working-directory: ./bindings/python
        run: |
          python -m pip install build
          python -m build --sdist
      - uses: actions/upload-artifact@v4
        with:
          name: sdist
          path: ./bindings/python/dist/*.tar.gz

  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]
        include:
          # Add macOS ARM builds
          - os: macos-latest
            python-version: "3.9"
            arch: arm64
          - os: macos-latest
            python-version: "3.10"
            arch: arm64
          - os: macos-latest
            python-version: "3.11"
            arch: arm64
          - os: macos-latest
            python-version: "3.12"
            arch: arm64
          - os: macos-latest
            python-version: "3.13"
            arch: arm64

    steps:
      - uses: actions/checkout@v4

      # Setup Python for macOS ARM builds (special case)
      - name: Set up special macOS ARM config
        if: runner.os == 'macOS' && matrix.arch == 'arm64'
        run: |
          echo "CIBW_ARCHS_MACOS=arm64" >> $GITHUB_ENV
          echo "ARCHFLAGS=-arch arm64" >> $GITHUB_ENV
          echo "MACOSX_DEPLOYMENT_TARGET=11.0" >> $GITHUB_ENV

      # Use cibuildwheel to build wheels
      - name: Build wheels
        uses: pypa/cibuildwheel@v2.16.2
        env:
          CIBW_BUILD: "cp${{ matrix.python-version == '3.13' && '313' || matrix.python-version == '3.12' && '312' || matrix.python-version == '3.11' && '311' || matrix.python-version == '3.10' && '310' || '39' }}*"
          # Skip PyPy builds
          CIBW_SKIP: "pp* *-musllinux_*"
          # Configure special macOS settings
          CIBW_ARCHS_MACOS: "${{ matrix.arch == 'arm64' && 'arm64' || 'x86_64' }}"
          CIBW_BEFORE_BUILD: "pip install numpy"
          CIBW_ENVIRONMENT: "${{ runner.os == 'macOS' && format('MACOSX_DEPLOYMENT_TARGET={0}', matrix.arch == 'arm64' && '11.0' || '10.9') || '' }}"
        with:
          package-dir: ./bindings/python

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}-py${{ matrix.python-version }}${{ matrix.arch && format('-{0}', matrix.arch) || '' }}
          path: ./wheelhouse/*.whl

  combine_artifacts:
    name: Combine all artifacts
    needs: [build_sdist, build_wheels]
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: combined-artifacts

      - name: Create combined zip
        run: |
          cd combined-artifacts
          zip -r ../tinyvec-all-packages.zip ./*

      - name: Upload combined zip
        uses: actions/upload-artifact@v4
        with:
          name: tinyvec-all-packages
          path: tinyvec-all-packages.zip
          retention-days: 14
