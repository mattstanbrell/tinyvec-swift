name: Build Wheels with cibuildwheel

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      # Install cibuildwheel
      - name: Install cibuildwheel
        run: python -m pip install cibuildwheel==2.17.0

      # Set environment variables for cibuildwheel
      - name: Set up cibuildwheel
        shell: bash
        run: |
          # Skip PyPy builds
          echo "CIBW_SKIP=pp*" >> $GITHUB_ENV
          # Pre-install numpy as a build dependency
          echo "CIBW_BEFORE_BUILD=pip install numpy" >> $GITHUB_ENV
          # Configure specifically for Linux to install the right packages
          if [[ "${{ runner.os }}" == "Linux" ]]; then
            echo "CIBW_BEFORE_BUILD_LINUX=yum install -y gcc gcc-c++ make || apt-get update && apt-get install -y gcc g++ make" >> $GITHUB_ENV
          fi
          # Don't require NumPy during package import test
          echo "CIBW_TEST_REQUIRES=pytest" >> $GITHUB_ENV
          echo "CIBW_TEST_COMMAND=python -c \"import tinyvec; print('Successfully imported tinyvec')\"" >> $GITHUB_ENV
          # Skip pure-Python wheel creation
          echo "CIBW_BUILD=*" >> $GITHUB_ENV

      # Build the wheels
      - name: Build wheels
        working-directory: ./bindings/python
        run: python -m cibuildwheel --output-dir dist

      # Upload wheels as artifacts
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}
          path: ./bindings/python/dist/*.whl
          retention-days: 14
