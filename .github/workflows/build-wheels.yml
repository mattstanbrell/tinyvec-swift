name: Build Wheels with Conda

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.11"]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Conda
        uses: conda-incubator/setup-miniconda@v3
        with:
          auto-update-conda: true
          python-version: ${{ matrix.python-version }}
          channels: conda-forge,defaults
          activate-environment: build-env

      - name: Conda info
        shell: bash -l {0}
        run: |
          conda info
          conda list

      - name: Install build dependencies
        shell: bash -l {0}
        run: |
          conda install -y pip numpy setuptools wheel build
          python -m pip install --upgrade pip

      # Install platform-specific dependencies
      - name: Install Linux dependencies
        if: runner.os == 'Linux'
        shell: bash -l {0}
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc build-essential

      - name: Install macOS dependencies
        if: runner.os == 'macOS'
        shell: bash -l {0}
        run: |
          conda install -y llvm-openmp clang clangxx
          echo "CC=clang" >> $GITHUB_ENV
          echo "CXX=clang++" >> $GITHUB_ENV

      - name: Setup MSVC (Windows)
        if: runner.os == 'Windows'
        uses: ilammy/msvc-dev-cmd@v1

      # Build the wheel
      - name: Build wheel
        shell: bash -l {0}
        working-directory: ./bindings/python
        run: |
          mkdir -p dist
          python -m build --wheel --outdir dist/

      # Test the built wheel
      - name: Test wheel installation
        shell: bash -l {0}
        working-directory: ./bindings/python
        run: |
          # Create a test environment
          python -m pip install --force-reinstall --no-index --find-links=dist tinyvec
          # Quick test import
          python -c "import tinyvec; print(f'Successfully imported tinyvec')"

      # Upload wheels as artifacts
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}-py${{ matrix.python-version }}
          path: ./bindings/python/dist/*.whl
          retention-days: 14
